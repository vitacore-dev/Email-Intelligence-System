#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è ORCID –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤ —Ç–µ–∫—É—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
email-search-backend —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ.

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-07-04
–í–µ—Ä—Å–∏—è: 1.0
"""

import logging
from typing import Dict, List, Optional, Any
from enhanced_orcid_ranking_algorithm import EnhancedORCIDRankingAlgorithm, ORCIDCandidate

logger = logging.getLogger(__name__)

class EnhancedORCIDIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    def __init__(self, enable_ml: bool = True, cache_dir: str = "./cache"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            enable_ml: –í–∫–ª—é—á–∏—Ç—å ML —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.enhanced_algorithm = EnhancedORCIDRankingAlgorithm(
            cache_dir=cache_dir,
            enable_ml=enable_ml
        )
        
        # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.use_enhanced_algorithm = True
        
        logger.info("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ORCID –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def enhance_existing_orcid_selection(self,
                                       found_orcids: List[Dict[str, Any]], 
                                       email: str,
                                       target_name: Optional[str] = None,
                                       context: str = "academic") -> Dict[str, Any]:
        """
        –£–ª—É—á—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ ORCID
        
        Args:
            found_orcids: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ORCID –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            email: Email –¥–ª—è –ø–æ–∏—Å–∫–∞
            target_name: –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
        Returns:
            –õ—É—á—à–∏–π ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        if not self.use_enhanced_algorithm or not found_orcids:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
            return self._fallback_to_legacy_algorithm(found_orcids)
        
        try:
            logger.info(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫ {len(found_orcids)} –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º")
            
            # –†–∞–Ω–∂–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
            ranked_candidates = self.enhanced_algorithm.rank_orcid_candidates(
                candidates=found_orcids,
                email=email,
                context=context,
                target_name=target_name
            )
            
            if not ranked_candidates:
                return self._fallback_to_legacy_algorithm(found_orcids)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            best_candidate = ranked_candidates[0]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            result = {
                'orcid': best_candidate.orcid_id,
                'url': best_candidate.url,
                'position_in_list': best_candidate.position_in_search,
                'relevance_score': best_candidate.relevance_score,
                'confidence_level': best_candidate.confidence_level,
                'is_direct_orcid_url': 'orcid.org' in best_candidate.url.lower(),
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
                'enhanced_scores': {
                    'position': best_candidate.position_score,
                    'url_quality': best_candidate.url_quality_score,
                    'name_similarity': best_candidate.name_similarity_score,
                    'domain_quality': best_candidate.domain_quality_score,
                    'domain_affinity': best_candidate.domain_affinity_score,
                    'temporal': best_candidate.temporal_score,
                    'network': best_candidate.network_score,
                    'citation': best_candidate.citation_score,
                    'semantic': best_candidate.semantic_score
                },
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                'extracted_names': best_candidate.extracted_names,
                'publication_count': best_candidate.publication_count,
                'h_index': best_candidate.h_index,
                'research_areas': best_candidate.research_areas,
                
                # –í—Å–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                'all_candidates': [
                    {
                        'orcid': c.orcid_id,
                        'relevance_score': c.relevance_score,
                        'confidence_level': c.confidence_level,
                        'position_in_search': c.position_in_search
                    }
                    for c in ranked_candidates
                ]
            }
            
            logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω ORCID {best_candidate.orcid_id} —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é {best_candidate.relevance_score:.3f}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ: {str(e)}")
            return self._fallback_to_legacy_algorithm(found_orcids)
    
    def _fallback_to_legacy_algorithm(self, found_orcids: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Fallback –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
        if not found_orcids:
            return None
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é relevance_score
        sorted_orcids = sorted(found_orcids, 
                             key=lambda x: x.get('relevance_score', 0), 
                             reverse=True)
        
        best_orcid = sorted_orcids[0]
        logger.info(f"üîÑ Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É: –≤—ã–±—Ä–∞–Ω {best_orcid.get('orcid')}")
        
        return best_orcid
    
    def get_comparative_analysis(self,
                               found_orcids: List[Dict[str, Any]], 
                               email: str,
                               target_name: Optional[str] = None) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        
        Returns:
            –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–≤—É—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
        """
        if not found_orcids:
            return {'error': '–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—Ä–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        legacy_result = self._fallback_to_legacy_algorithm(found_orcids)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        enhanced_result = None
        try:
            self.use_enhanced_algorithm = True
            enhanced_result = self.enhance_existing_orcid_selection(
                found_orcids, email, target_name
            )
        except:
            enhanced_result = None
        
        comparison = {
            'legacy_algorithm': {
                'selected_orcid': legacy_result.get('orcid') if legacy_result else None,
                'relevance_score': legacy_result.get('relevance_score', 0) if legacy_result else 0
            },
            'enhanced_algorithm': {
                'selected_orcid': enhanced_result.get('orcid') if enhanced_result else None,
                'relevance_score': enhanced_result.get('relevance_score', 0) if enhanced_result else 0,
                'confidence_level': enhanced_result.get('confidence_level') if enhanced_result else None
            },
            'comparison': {
                'algorithms_agree': False,
                'score_difference': 0,
                'recommendation': 'use_legacy'
            }
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if enhanced_result and legacy_result:
            legacy_orcid = legacy_result.get('orcid')
            enhanced_orcid = enhanced_result.get('orcid')
            
            comparison['comparison']['algorithms_agree'] = (legacy_orcid == enhanced_orcid)
            comparison['comparison']['score_difference'] = (
                enhanced_result.get('relevance_score', 0) - 
                legacy_result.get('relevance_score', 0)
            )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            if enhanced_result.get('confidence_level') in ['high', 'very_high']:
                comparison['comparison']['recommendation'] = 'use_enhanced'
            elif comparison['comparison']['algorithms_agree']:
                comparison['comparison']['recommendation'] = 'both_agree'
            else:
                comparison['comparison']['recommendation'] = 'manual_review'
        
        return comparison
    
    def add_user_feedback(self,
                         email: str,
                         selected_orcid: str,
                         correct_orcid: str,
                         confidence: float = 1.0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        try:
            self.enhanced_algorithm.add_feedback(
                email=email,
                selected_orcid=selected_orcid,
                correct_orcid=correct_orcid,
                user_confidence=confidence
            )
            logger.info(f"üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {email}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")
    
    def get_algorithm_performance(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        return self.enhanced_algorithm.get_algorithm_stats()
    
    def export_trained_model(self, filepath: str):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        self.enhanced_algorithm.export_model(filepath)
    
    def import_trained_model(self, filepath: str):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        self.enhanced_algorithm.import_model(filepath)


def create_migration_patch_for_search_engines():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª search_engines.py
    
    Returns:
        –ö–æ–¥ –ø–∞—Ç—á–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
    """
    
    patch_code = '''
# –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ search_engines.py:
from enhanced_orcid_integration import EnhancedORCIDIntegration

# –î–æ–±–∞–≤–∏—Ç—å –≤ __init__ –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ SearchEngineService:
self.enhanced_orcid = EnhancedORCIDIntegration(
    enable_ml=True,  # –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    cache_dir="./data/cache"
)

# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ _select_best_orcid:
def _select_best_orcid(self, found_orcids: List[Dict[str, Any]], 
                      email: str = None, 
                      target_name: str = None) -> Dict[str, Any]:
    """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π ORCID –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    if not found_orcids:
        return None
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        result = self.enhanced_orcid.enhance_existing_orcid_selection(
            found_orcids=found_orcids,
            email=email or "unknown@example.com",
            target_name=target_name,
            context="academic"  # –ú–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
        )
        
        if result:
            logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±—Ä–∞–ª ORCID: {result.get('orcid')}")
            return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {str(e)}")
    
    # Fallback –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–µ
    sorted_orcids = sorted(found_orcids, key=lambda x: x['relevance_score'], reverse=True)
    best_orcid = sorted_orcids[0]
    
    logger.info(f"üîÑ Fallback: –≤—ã–±—Ä–∞–Ω ORCID {best_orcid['orcid']}")
    return best_orcid

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:
def compare_orcid_algorithms(self, found_orcids: List[Dict[str, Any]], 
                           email: str, target_name: str = None) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤"""
    
    return self.enhanced_orcid.get_comparative_analysis(
        found_orcids=found_orcids,
        email=email,
        target_name=target_name
    )

# –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:
def add_orcid_feedback(self, email: str, selected_orcid: str, 
                      correct_orcid: str, confidence: float = 1.0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    
    self.enhanced_orcid.add_user_feedback(
        email=email,
        selected_orcid=selected_orcid,
        correct_orcid=correct_orcid,
        confidence=confidence
    )
'''
    
    return patch_code


def demonstrate_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    print("üîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞
    integration = EnhancedORCIDIntegration(enable_ml=False)
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
    legacy_orcids = [
        {
            'orcid': '0000-0003-2583-0599',
            'url': 'https://orcid.org/0000-0003-2583-0599',
            'position_in_list': 40,
            'relevance_score': 0.61,  # –°—Ç–∞—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
            'is_direct_orcid_url': True
        },
        {
            'orcid': '0000-0003-4812-2165',
            'url': 'https://example.edu/profile/researcher',
            'position_in_list': 9,
            'relevance_score': 0.63,  # –°—Ç–∞—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
            'is_direct_orcid_url': False
        }
    ]
    
    email = "damirov@list.ru"
    target_name = "–ú–∞—Ä–∞–ø–æ–≤ –î–∞–º–∏—Ä –ò–ª—å–¥–∞—Ä–æ–≤–∏—á"
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"Email: {email}")
    print(f"–¶–µ–ª–µ–≤–æ–µ –∏–º—è: {target_name}")
    print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(legacy_orcids)}")
    print()
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    comparison = integration.get_comparative_analysis(
        found_orcids=legacy_orcids,
        email=email,
        target_name=target_name
    )
    
    print("üîÑ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:")
    print("=" * 60)
    
    legacy = comparison['legacy_algorithm']
    enhanced = comparison['enhanced_algorithm']
    comp = comparison['comparison']
    
    print(f"–°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:")
    print(f"  ORCID: {legacy['selected_orcid']}")
    print(f"  –û—Ü–µ–Ω–∫–∞: {legacy['relevance_score']:.3f}")
    print()
    
    print(f"–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:")
    print(f"  ORCID: {enhanced['selected_orcid']}")
    print(f"  –û—Ü–µ–Ω–∫–∞: {enhanced['relevance_score']:.3f}")
    print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced['confidence_level']}")
    print()
    
    print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
    print(f"  –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ–≥–ª–∞—Å–Ω—ã: {comp['algorithms_agree']}")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ—Ü–µ–Ω–∫–∞—Ö: {comp['score_difference']:.3f}")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {comp['recommendation']}")
    print()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    enhanced_result = integration.enhance_existing_orcid_selection(
        found_orcids=legacy_orcids,
        email=email,
        target_name=target_name,
        context="academic"
    )
    
    if enhanced_result:
        print("üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
        print("=" * 60)
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π ORCID: {enhanced_result['orcid']}")
        print(f"–û–±—â–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {enhanced_result['relevance_score']:.3f}")
        print(f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {enhanced_result['confidence_level']}")
        print()
        
        scores = enhanced_result['enhanced_scores']
        print("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤:")
        for factor, score in scores.items():
            print(f"  {factor}: {score:.3f}")
        print()
        
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
        print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º–µ–Ω: {len(enhanced_result['extracted_names'])}")
        print(f"  –ü—É–±–ª–∏–∫–∞—Ü–∏–∏: {enhanced_result['publication_count']}")
        print(f"  H-index: {enhanced_result['h_index']}")
        print(f"  –û–±–ª–∞—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {enhanced_result['research_areas']}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    print("\nüéì –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")
    integration.add_user_feedback(
        email=email,
        selected_orcid=enhanced_result['orcid'],
        correct_orcid="0000-0003-2583-0599",  # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π ORCID
        confidence=0.9
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = integration.get_algorithm_performance()
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:")
    print(f"–í–µ—Ä—Å–∏—è: {stats['version']}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {stats['current_accuracy']:.3f}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª—É—á–∞–µ–≤: {stats['total_processed']}")
    print(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {stats['feedback_received']}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—á–∞
    print(f"\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—á–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    patch = create_migration_patch_for_search_engines()
    
    with open("integration_patch.py", "w", encoding="utf-8") as f:
        f.write(f"# –ü–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ORCID\n")
        f.write(f"# –î–∞—Ç–∞: 2025-07-04\n\n")
        f.write(patch)
    
    print(f"‚úÖ –ü–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ integration_patch.py")
    
    return enhanced_result


if __name__ == "__main__":
    demonstrate_integration()

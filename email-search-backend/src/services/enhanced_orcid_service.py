#!/usr/bin/env python3
"""
üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ORCID —Å–µ—Ä–≤–∏—Å —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ORCID —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º –∏–º–µ–Ω –∏ –æ—Ç—á–µ—Å—Ç–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞

–ê–≤—Ç–æ—Ä: AI Assistant  
–î–∞—Ç–∞: 2025-07-04
–í–µ—Ä—Å–∏—è: 3.0-enhanced
"""

import logging
from typing import Dict, List, Optional, Any, Set, Tuple
from .orcid_service import ORCIDService
from .enhanced_orcid_ranking import EnhancedORCIDRanking

logger = logging.getLogger(__name__)

class EnhancedORCIDService(ORCIDService):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π ORCID —Å–µ—Ä–≤–∏—Å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        super().__init__()
        self.ranking_algorithm = EnhancedORCIDRanking()
        logger.info("üöÄ Enhanced ORCID Service v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def enhanced_search_by_email(self, 
                                email: str,
                                target_name: Optional[str] = None,
                                context: str = "academic") -> List[Dict[str, Any]]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ORCID –ø–æ email —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        
        Args:
            email: Email –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            target_name: –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ email (–µ—Å–ª–∏ –µ—Å—Ç—å)
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (academic, personal, corporate)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ORCID –¥–ª—è email: {email}")
        logger.info(f"üë§ –¶–µ–ª–µ–≤–æ–µ –∏–º—è: {target_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
        logger.info(f"üè¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
        
        # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_candidates = self._collect_orcid_candidates(email, target_name)
        
        if not all_candidates:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è email: {email}")
            return []
        
        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ {len(all_candidates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        # –®–∞–≥ 2: –†–∞–Ω–∂–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        ranked_candidates = self.ranking_algorithm.rank_orcid_candidates(
            candidates=all_candidates,
            email=email,
            context=context,
            target_name=target_name,
            orcid_service=self
        )
        
        # –®–∞–≥ 3: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        researchers = []
        for candidate in ranked_candidates:
            researcher_profile = self.get_researcher_profile(candidate.orcid_id)
            if researcher_profile:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏
                researcher_profile['ranking_info'] = {
                    'relevance_score': candidate.relevance_score,
                    'confidence_level': candidate.confidence_level,
                    'source_method': candidate.source_method,
                    'name_similarity_score': candidate.name_similarity_score,
                    'factors': {
                        'position': candidate.position_score,
                        'url_quality': candidate.url_quality_score,
                        'name_similarity': candidate.name_similarity_score,
                        'domain_quality': candidate.domain_quality_score,
                        'domain_affinity': candidate.domain_affinity_score,
                        'temporal': candidate.temporal_score,
                        'network': candidate.network_score,
                        'citation': candidate.citation_score,
                        'semantic': candidate.semantic_score
                    }
                }
                researchers.append(researcher_profile)
        
        logger.info(f"üèÜ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(researchers)} —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π")
        return researchers
    
    def _collect_orcid_candidates(self, 
                                 email: str, 
                                 target_name: Optional[str] = None) -> List[Dict[str, Any]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        
        candidates = []
        found_orcids = set()  # –î–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ü–æ–∏—Å–∫ –ø–æ email (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
        logger.info("üîç –ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ü–æ–∏—Å–∫ –ø–æ email")
        try:
            email_orcids = self.search_orcid_by_email(email)
            for i, orcid_id in enumerate(email_orcids):
                if orcid_id not in found_orcids:
                    candidates.append({
                        'orcid_id': orcid_id,
                        'url': f'https://orcid.org/{orcid_id}',
                        'position_in_list': i,
                        'source_method': 'email_search'
                    })
                    found_orcids.add(orcid_id)
            
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ email: {len(email_orcids)} ORCID")
        except Exception as e:
            logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ email: {str(e)}")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
        if target_name:
            logger.info("üîç –ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
            try:
                name_variations = self._generate_name_variations(target_name)
                
                for variation in name_variations:
                    given_name, family_name = self._parse_name_variation(variation)
                    if given_name and family_name:
                        name_orcids = self.search_by_name(given_name, family_name)
                        
                        for i, orcid_id in enumerate(name_orcids):
                            if orcid_id not in found_orcids:
                                candidates.append({
                                    'orcid_id': orcid_id,
                                    'url': f'https://orcid.org/{orcid_id}',
                                    'position_in_list': i + 100,  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç email –ø–æ–∏—Å–∫–∞
                                    'source_method': f'name_search_{variation}'
                                })
                                found_orcids.add(orcid_id)
                
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏: {len(found_orcids) - len(email_orcids)} –Ω–æ–≤—ã—Ö ORCID")
            except Exception as e:
                logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏: {str(e)}")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º email (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω)
        logger.info("üîç –ò—Å—Ç–æ—á–Ω–∏–∫ 3: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º email")
        try:
            email_parts = self._extract_names_from_email(email)
            
            for name_combo in email_parts:
                if len(name_combo) >= 2:
                    given_name, family_name = name_combo[0], name_combo[-1]
                    parts_orcids = self.search_by_name(given_name, family_name)
                    
                    for i, orcid_id in enumerate(parts_orcids):
                        if orcid_id not in found_orcids:
                            candidates.append({
                                'orcid_id': orcid_id,
                                'url': f'https://orcid.org/{orcid_id}',
                                'position_in_list': i + 200,  # –°–º–µ—â–µ–Ω–∏–µ
                                'source_method': 'email_parts_search'
                            })
                            found_orcids.add(orcid_id)
            
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ —á–∞—Å—Ç—è–º email: {len(found_orcids) - len(candidates) if len(candidates) > 0 else 0} –Ω–æ–≤—ã—Ö ORCID")
        except Exception as e:
            logger.error(f"   –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Å—Ç—è–º email: {str(e)}")
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        unique_candidates = []
        seen_orcids = set()
        
        for candidate in candidates:
            orcid_id = candidate['orcid_id']
            if orcid_id not in seen_orcids:
                unique_candidates.append(candidate)
                seen_orcids.add(orcid_id)
        
        logger.info(f"üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(unique_candidates)}")
        
        return unique_candidates
    
    def _generate_name_variations(self, target_name: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        variations = [target_name]
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏
        parts = target_name.split()
        
        if len(parts) >= 2:
            # –ü—Ä—è–º–æ–π –ø–æ—Ä—è–¥–æ–∫: –ò–º—è –§–∞–º–∏–ª–∏—è
            variations.append(f"{parts[0]} {parts[-1]}")
            
            # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –§–∞–º–∏–ª–∏—è –ò–º—è
            variations.append(f"{parts[-1]} {parts[0]}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
            if len(parts) >= 3:
                variations.append(f"{parts[0]} {parts[-1]}")  # –ò–º—è –§–∞–º–∏–ª–∏—è
                variations.append(f"{parts[-1]} {parts[0]}")  # –§–∞–º–∏–ª–∏—è –ò–º—è
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        return list(set(variations))
    
    def _parse_name_variation(self, name_variation: str) -> Tuple[str, str]:
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é –∏–º–µ–Ω–∏ –Ω–∞ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"""
        parts = name_variation.strip().split()
        
        if len(parts) >= 2:
            return parts[0], parts[-1]
        elif len(parts) == 1:
            return parts[0], ""
        else:
            return "", ""
    
    def _extract_names_from_email(self, email: str) -> List[List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ email –∞–¥—Ä–µ—Å–∞"""
        email_part = email.split('@')[0].lower()
        
        combinations = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        separators = ['.', '_', '-']
        for sep in separators:
            if sep in email_part:
                parts = [part.strip() for part in email_part.split(sep) if part.strip()]
                if len(parts) >= 2:
                    combinations.append(parts)
        
        # –ò—â–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: —Ñ–∞–º–∏–ª–∏—è–∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, gorobetsleonid)
        common_surnames = ['gorobets', 'petrov', 'ivanov', 'smirnov', 'kuznetsov', 'popov']
        common_names = ['leonid', 'vladimir', 'alexander', 'dmitry', 'sergey', 'andrey']
        
        for surname in common_surnames:
            if surname in email_part:
                remaining = email_part.replace(surname, '').strip()
                for name in common_names:
                    if name in remaining:
                        combinations.append([surname, name])
                        combinations.append([name, surname])
                        break
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø–æ–ª–∞–º
        if not combinations and len(email_part) > 4:
            mid = len(email_part) // 2
            combinations.append([email_part[:mid], email_part[mid:]])
            combinations.append([email_part[mid:], email_part[:mid]])
        
        return combinations
    
    def get_best_orcid_with_ranking(self, 
                                   email: str,
                                   target_name: Optional[str] = None,
                                   context: str = "academic",
                                   min_confidence: str = "low") -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π ORCID —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–∏
        
        Args:
            email: Email –∞–¥—Ä–µ—Å
            target_name: –ò–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å ORCID ID –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ None
        """
        researchers = self.enhanced_search_by_email(email, target_name, context)
        
        if not researchers:
            return None
        
        best_researcher = researchers[0]
        ranking_info = best_researcher.get('ranking_info', {})
        confidence_level = ranking_info.get('confidence_level', 'very_low')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_levels = ['very_low', 'low', 'medium', 'high', 'very_high']
        min_level_index = confidence_levels.index(min_confidence)
        current_level_index = confidence_levels.index(confidence_level)
        
        if current_level_index >= min_level_index:
            return {
                'orcid_id': best_researcher['orcid_id'],
                'relevance_score': ranking_info.get('relevance_score', 0.0),
                'confidence_level': confidence_level,
                'source_method': ranking_info.get('source_method', 'unknown'),
                'name_similarity_score': ranking_info.get('name_similarity_score', 0.0),
                'profile': best_researcher
            }
        
        logger.warning(f"‚ö†Ô∏è –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –∏–º–µ–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence_level}, "
                      f"—á—Ç–æ –Ω–∏–∂–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ {min_confidence}")
        return None
    
    def validate_orcid_for_email(self, 
                                orcid_id: str, 
                                email: str,
                                target_name: Optional[str] = None) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ORCID ID —É–∫–∞–∑–∞–Ω–Ω–æ–º—É email
        
        Args:
            orcid_id: ORCID ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            email: Email –∞–¥—Ä–µ—Å
            target_name: –û–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info(f"üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º ORCID {orcid_id} –¥–ª—è email {email}")
        
        validation_result = {
            'orcid_id': orcid_id,
            'email': email,
            'is_valid': False,
            'confidence_score': 0.0,
            'validation_details': {},
            'recommendations': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å ORCID
            profile = self.get_researcher_profile(orcid_id)
            if not profile:
                validation_result['validation_details']['error'] = 'ORCID –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                return validation_result
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            candidate_data = [{
                'orcid_id': orcid_id,
                'url': f'https://orcid.org/{orcid_id}',
                'position_in_list': 0,
                'source_method': 'validation'
            }]
            
            # –†–∞–Ω–∂–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            ranked_candidates = self.ranking_algorithm.rank_orcid_candidates(
                candidates=candidate_data,
                email=email,
                context="academic",
                target_name=target_name,
                orcid_service=self
            )
            
            if ranked_candidates:
                candidate = ranked_candidates[0]
                
                validation_result['confidence_score'] = candidate.relevance_score
                validation_result['validation_details'] = {
                    'name_similarity_score': candidate.name_similarity_score,
                    'extracted_names': candidate.extracted_names,
                    'confidence_level': candidate.confidence_level,
                    'factors': {
                        'name_similarity': candidate.name_similarity_score,
                        'url_quality': candidate.url_quality_score,
                        'domain_quality': candidate.domain_quality_score,
                        'semantic': candidate.semantic_score
                    }
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence level
                if candidate.confidence_level in ['medium', 'high', 'very_high']:
                    validation_result['is_valid'] = True
                    validation_result['recommendations'].append(
                        f"ORCID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {candidate.confidence_level}"
                    )
                else:
                    validation_result['recommendations'].append(
                        f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({candidate.confidence_level}). "
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if candidate.name_similarity_score < 0.5:
                    validation_result['recommendations'].append(
                        "–ù–∏–∑–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏–º–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ email"
                    )
                
                if candidate.name_similarity_score > 0.8:
                    validation_result['recommendations'].append(
                        "–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∏–º–µ–Ω - —Ö–æ—Ä–æ—à–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
                    )
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ORCID {orcid_id}: {str(e)}")
            validation_result['validation_details']['error'] = str(e)
        
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {validation_result['is_valid']}")
        return validation_result
    
    def cross_validate_orcids(self, 
                             email: str,
                             target_name: Optional[str] = None,
                             max_candidates: int = 5) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö ORCID
        
        Args:
            email: Email –∞–¥—Ä–µ—Å
            target_name: –û–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è
            max_candidates: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é ORCID –¥–ª—è {email}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        researchers = self.enhanced_search_by_email(email, target_name, "academic")
        
        if not researchers:
            return {
                'email': email,
                'target_name': target_name,
                'candidates_found': 0,
                'validation_results': [],
                'recommendation': '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã ORCID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
            }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates_to_validate = researchers[:max_candidates]
        
        validation_results = []
        for researcher in candidates_to_validate:
            orcid_id = researcher['orcid_id']
            ranking_info = researcher.get('ranking_info', {})
            
            validation_result = {
                'orcid_id': orcid_id,
                'rank': len(validation_results) + 1,
                'relevance_score': ranking_info.get('relevance_score', 0.0),
                'confidence_level': ranking_info.get('confidence_level', 'unknown'),
                'source_method': ranking_info.get('source_method', 'unknown'),
                'name_similarity_score': ranking_info.get('name_similarity_score', 0.0),
                'profile_summary': {
                    'name': f"{researcher.get('personal_info', {}).get('given_names', '')} "
                           f"{researcher.get('personal_info', {}).get('family_name', '')}",
                    'works_count': researcher.get('works', {}).get('total_works', 0),
                    'keywords': researcher.get('keywords', [])[:5]
                }
            }
            
            validation_results.append(validation_result)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        best_candidate = validation_results[0]
        
        if best_candidate['confidence_level'] in ['high', 'very_high']:
            recommendation = f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ORCID {best_candidate['orcid_id']} (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)"
        elif best_candidate['confidence_level'] == 'medium':
            recommendation = f"–í–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç ORCID {best_candidate['orcid_id']} (—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)"
        else:
            recommendation = "–ù–∏ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        
        result = {
            'email': email,
            'target_name': target_name,
            'candidates_found': len(researchers),
            'candidates_analyzed': len(validation_results),
            'validation_results': validation_results,
            'recommendation': recommendation,
            'best_candidate': best_candidate,
            'analysis_summary': {
                'high_confidence_count': len([r for r in validation_results 
                                            if r['confidence_level'] in ['high', 'very_high']]),
                'medium_confidence_count': len([r for r in validation_results 
                                              if r['confidence_level'] == 'medium']),
                'low_confidence_count': len([r for r in validation_results 
                                           if r['confidence_level'] in ['low', 'very_low']])
            }
        }
        
        logger.info(f"‚úÖ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
        return result
    
    def rank_orcid_candidates(self, 
                            orcid_candidates: List[str], 
                            search_results: List[Dict[str, Any]],
                            email: Optional[str] = None,
                            target_name: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
        Args:
            orcid_candidates: –°–ø–∏—Å–æ–∫ ORCID ID –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            email: Email –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            target_name: –¶–µ–ª–µ–≤–æ–µ –∏–º—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ORCID —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        logger.info(f"üèÜ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {len(orcid_candidates)} ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        if not orcid_candidates:
            return []
        
        ranked_results = []
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ORCID –≤ —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            candidates = []
            for i, orcid_id in enumerate(orcid_candidates):
                candidates.append({
                    'orcid_id': orcid_id,
                    'url': f'https://orcid.org/{orcid_id}',
                    'position_in_list': i,
                    'source_method': 'external_search'
                })
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∏–º—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
            if not target_name and search_results:
                target_name = self._extract_target_name_from_results(search_results)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            ranked_candidates = self.ranking_algorithm.rank_orcid_candidates(
                candidates=candidates,
                email=email or 'unknown@example.com',
                context='academic',
                target_name=target_name,
                orcid_service=self
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            for candidate in ranked_candidates:
                ranked_results.append({
                    'orcid_id': candidate.orcid_id,
                    'confidence': candidate.relevance_score,
                    'confidence_level': candidate.confidence_level,
                    'name_similarity_score': candidate.name_similarity_score,
                    'factors': {
                        'position': candidate.position_score,
                        'url_quality': candidate.url_quality_score,
                        'name_similarity': candidate.name_similarity_score,
                        'domain_quality': candidate.domain_quality_score,
                        'semantic': candidate.semantic_score
                    }
                })
            
            if ranked_results:
                logger.info(f"üéØ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {ranked_results[0]['orcid_id']} (confidence: {ranked_results[0]['confidence']:.3f})")
            else:
                logger.info("üéØ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è ORCID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {str(e)}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å –±–∞–∑–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            for i, orcid_id in enumerate(orcid_candidates):
                ranked_results.append({
                    'orcid_id': orcid_id,
                    'confidence': 0.5 - (i * 0.1),  # –£–±—ã–≤–∞—é—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    'confidence_level': 'low',
                    'name_similarity_score': 0.0,
                    'factors': {}
                })
        
        return ranked_results
    
    def _extract_target_name_from_results(self, search_results: List[Dict[str, Any]]) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ –∏–º—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        import re
        
        for result in search_results:
            text = f"{result.get('title', '')} {result.get('snippet', '')}"
            
            # –ò—â–µ–º —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ"
            russian_names = re.findall(r'([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+)', text)
            if russian_names:
                return russian_names[0]
            
            # –ò—â–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
            english_names = re.findall(r'([A-Z][a-z]+\s+[A-Z][a-z]+)', text)
            if english_names:
                return english_names[0]
        
        return None
